// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Patient {
    id        String   @id @default(cuid())
    refId     String   @unique
    name      String
    birthDate DateTime

    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    evaluations Evaluation[]
}

model Clinic {
    id            String               @id @default(cuid())
    name          String
    collaborators ClinicCollaborator[]
    evaluations   Evaluation[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Collaborator {
    id          String               @id @default(cuid())
    name        String
    crm         String               @unique
    role        Role
    clinics     ClinicCollaborator[]
    evaluations Evaluation[]

    // integraUsername String?
    // integraPassword String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ClinicCollaborator {
    clinicId       String
    collaboratorId String

    clinic       Clinic       @relation(fields: [clinicId], references: [id], onDelete: Cascade)
    collaborator Collaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([clinicId, collaboratorId])
}

model Evaluation {
    id              String  @id @default(cuid())
    patientId       String
    collaboratorId  String
    done            Boolean @default(false)
    clinicId        String?
    clinicalData    String?
    continuousData  String?
    diagnosis       String?
    treatment       String?
    followUp        String?
    nextAppointment String?
    eyes            Eyes?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    patient      Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
    collaborator Collaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)
    clinic       Clinic?      @relation(fields: [clinicId], references: [id], onDelete: SetNull)
}

model Eyes {
    id           String @id @default(cuid())
    evaluationId String @unique

    rightEyeId String @unique
    leftEyeId  String @unique
    rightEye   Eye    @relation("RightEye", fields: [rightEyeId], references: [id], onDelete: Cascade)
    leftEye    Eye    @relation("LeftEye", fields: [leftEyeId], references: [id], onDelete: Cascade)

    evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
}

model Eye {
    id         String       @id @default(cuid())
    logs       EyeLog[]
    refraction Refraction[]
    surgeries  EyeSurgery[]
    eyedrops   Eyedrop[]

    rightEye Eyes? @relation("RightEye")
    leftEye  Eyes? @relation("LeftEye")
}

model EyeLog {
    id         String     @default(cuid())
    type       EyeLogType
    eyeId      String
    details    String?
    recordedAt DateTime   @default(now())
    eye        Eye        @relation(fields: [eyeId], references: [id], onDelete: Cascade)

    @@id([type, eyeId])
}

model Refraction {
    id           String   @id @default(cuid())
    eyeId        String
    spherical    Float?
    cylinder     Float?
    axis         Float?
    visualAcuity String?
    recordedAt   DateTime @default(now())
    eye          Eye      @relation(fields: [eyeId], references: [id], onDelete: Cascade)
}

model EyeSurgery {
    id        String   @id @default(cuid())
    eyeId     String
    procedure String
    date      DateTime
    notes     String?
    eye       Eye      @relation(fields: [eyeId], references: [id], onDelete: Cascade)
}

model Eyedrop {
    id        String    @id @default(cuid())
    eyeId     String
    name      String
    dosage    String?
    startDate DateTime?
    notes     String?
    eye       Eye       @relation(fields: [eyeId], references: [id], onDelete: Cascade)
}

enum Role {
    I1
    I2
    I3
    I4
    R1
    R2
    R3
    F1
    F2
    F3
    STAFF
}

enum EyeLogType {
    BIOMICROSCOPY
    PACHYMETRY
    TONOMETRY
    OCT
    VISUAL_FIELD
    FUNDOSCOPY
    RETINOGRAPHY
    GONIOSCOPY
    ANGIOGRAPHY
    CT_CORNEA
    OPTICAL_BIOMETRY
    SPECULAR_MICROSCOPY
    OTHER_1
    OTHER_2
    OTHER_3
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    isStaff       Boolean   @default(false)
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
