generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Patient {
  id        String   @id @default(cuid())
  refId     String   @unique
  name      String
  birthDate DateTime

  createdAt   DateTime                          @default(now())
  updatedAt   DateTime                          @updatedAt
  evaluations Evaluation[]
  injections  IntravitrealInjectionIndication[]
}

model Clinic {
  id            String                            @id @default(cuid())
  name          String
  collaborators ClinicCollaborator[]
  evaluations   Evaluation[]
  injections    IntravitrealInjectionIndication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Collaborator {
  id             String                            @id @default(cuid())
  name           String
  crm            String                            @unique
  persistentNote String?
  role           Role
  clinics        ClinicCollaborator[]
  evaluations    Evaluation[]
  indications    IntravitrealInjectionIndication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClinicCollaborator {
  clinicId       String
  collaboratorId String

  clinic       Clinic       @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  collaborator Collaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([clinicId, collaboratorId])
}

model Evaluation {
  id              String  @id @default(cuid())
  patientId       String
  collaboratorId  String
  done            Boolean @default(false)
  clinicId        String?
  clinicalData    String?
  continuousData  String?
  diagnosis       String?
  treatment       String?
  followUp        String?
  nextAppointment String?

  // Form inputs
  swalisClassification String?
  observations         String?
  indication           String?
  indicationOther      String?
  medication           String?
  medicationOther      String?

  eyes          Eyes?
  prescriptions Prescription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient      Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  collaborator Collaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)
  clinic       Clinic?      @relation(fields: [clinicId], references: [id], onDelete: SetNull)
}

model Eyes {
  id           String @id @default(cuid())
  evaluationId String @unique

  rightEyeId String @unique
  leftEyeId  String @unique
  rightEye   Eye    @relation("RightEye", fields: [rightEyeId], references: [id], onDelete: Cascade)
  leftEye    Eye    @relation("LeftEye", fields: [leftEyeId], references: [id], onDelete: Cascade)

  evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
}

model Eye {
  id         String       @id @default(cuid())
  logs       EyeLog[]
  refraction Refraction[]
  surgeries  EyeSurgery[]
  eyedrops   Eyedrop[]

  rightEye Eyes? @relation("RightEye")
  leftEye  Eyes? @relation("LeftEye")
}

model EyeLog {
  id         String     @default(cuid())
  type       EyeLogType
  eyeId      String
  details    String?
  recordedAt DateTime   @default(now())
  eye        Eye        @relation(fields: [eyeId], references: [id], onDelete: Cascade)

  @@id([type, eyeId])
}

model Refraction {
  id             String   @id @default(cuid())
  eyeId          String
  spherical      Float?
  cylinder       Float?
  axis           Float?
  visualAcuity   String?
  correctionType String   @default("sc")
  recordedAt     DateTime @default(now())
  eye            Eye      @relation(fields: [eyeId], references: [id], onDelete: Cascade)
}

model EyeSurgery {
  id        String   @id @default(cuid())
  eyeId     String
  procedure String
  date      DateTime
  notes     String?
  eye       Eye      @relation(fields: [eyeId], references: [id], onDelete: Cascade)
}

model Eyedrop {
  id        String    @id @default(cuid())
  eyeId     String
  name      String
  dosage    String?
  startDate DateTime?
  notes     String?
  eye       Eye       @relation(fields: [eyeId], references: [id], onDelete: Cascade)
}

// Medicamentos e prescrições
model Medication {
  id             String   @id @default(cuid())
  name           String
  category       String
  unit           String
  instructions   String[]
  specialControl Boolean  @default(false)
  external       Boolean  @default(false) @map("eyedrop")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  prescriptionItems PrescriptionItem[]
}

model Prescription {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  evaluationId      String
  evaluation        Evaluation         @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  prescriptionItems PrescriptionItem[]
}

model PrescriptionItem {
  id                            String           @id @default(cuid())
  prescriptionId                String
  medicationId                  String?
  selectedMedicationInstruction String?
  customInstruction             String?
  quantity                      Int?
  eye                           PrescriptionEye?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  prescription Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
  medication   Medication?  @relation(fields: [medicationId], references: [id], onDelete: SetNull)
}

enum PrescriptionEye {
  OD
  OE
  AO
}

enum Role {
  I1
  I2
  I3
  I4
  R1
  R2
  R3
  F1
  F2
  F3
  STAFF
}

enum EyeLogType {
  BIOMICROSCOPY
  PACHYMETRY
  TONOMETRY
  OCT
  VISUAL_FIELD
  FUNDOSCOPY
  RETINOGRAPHY
  GONIOSCOPY
  ANGIOGRAPHY
  CT_CORNEA
  OPTICAL_BIOMETRY
  SPECULAR_MICROSCOPY
  OTHER_1
  OTHER_2
  OTHER_3
}

// Enums para injeções intravítreas
enum InjectionStatus {
  PENDING
  RESCHEDULED
  CONFIRMED
  COMPLETED
}

enum InjectionDayOfWeek {
  MONDAY
  TUESDAY
  THURSDAY
}

enum InjectionShift {
  MORNING
  AFTERNOON
}

enum InjectionEye {
  OD
  OE
}

enum IndicationStatus {
  PENDING
  PENDING_NIR
  APPROVED
  REJECTED
  SCHEDULED
  COMPLETED
  CANCELLED
}

model InjectionDayCapacity {
  id        String             @id @default(cuid())
  dayOfWeek InjectionDayOfWeek
  shift     InjectionShift
  capacity  Int                @default(30)
  overbook  Int                @default(2)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@unique([dayOfWeek, shift])
}

model IntravitrealInjectionIndication {
  id             String  @id @default(cuid())
  patientId      String
  collaboratorId String
  clinicId       String?

  // Diagnóstico e tratamento
  indication      String
  indicationOther String?
  medication      String
  medicationOther String?

  // Classificação Swalis (único critério de urgência e prioridade)
  swalisClassification String

  // Configuração de doses
  totalOD            Int
  totalOS            Int
  startEye           InjectionEye
  treatmentStartDate DateTime

  // Observações
  observations      String?
  contraindications String?
  allergies         String?

  // Status
  status IndicationStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  injections IntravitrealInjection[]

  patient      Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  collaborator Collaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)
  clinic       Clinic?      @relation(fields: [clinicId], references: [id], onDelete: SetNull)
}

model IntravitrealInjection {
  id                  String          @id @default(cuid())
  indicationId        String
  scheduledDate       DateTime
  status              InjectionStatus @default(PENDING)
  eye                 InjectionEye
  patientAttended     Boolean         @default(false)
  lateralityConfirmed Boolean         @default(false)
  performedAt         DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  indication IntravitrealInjectionIndication @relation(fields: [indicationId], references: [id], onDelete: Cascade)
}

// NextAuth models omitted for brevity
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  isStaff       Boolean   @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
