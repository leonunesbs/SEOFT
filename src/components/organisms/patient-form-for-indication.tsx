"use client";

import { PatientForm } from "./patient-form";
import { useRef } from "react";

interface PatientFormForIndicationProps {
  variant?: "dialog" | "page";
  compact?: boolean;
  showDescriptions?: boolean;
  formId?: string;
  onSuccess?: (patient: {
    id: string;
    refId: string;
    name: string;
    birthDate: string;
  }) => void;
  onLoadingChange?: (loading: boolean) => void;
}

export function PatientFormForIndication({
  variant = "dialog",
  compact = true,
  showDescriptions = false,
  formId,
  onSuccess,
  onLoadingChange,
}: PatientFormForIndicationProps) {
  const formRef = useRef<HTMLDivElement>(null);

  const handleSuccess = () => {
    if (formRef.current && onSuccess) {
      const formElement = formRef.current.querySelector("form");
      if (formElement) {
        const formData = new FormData(formElement);
        const refId = formData.get("refId") as string;
        const name = formData.get("name") as string;
        const birthDate = formData.get("birthDate") as string;

        // Convert DD/MM/YYYY to YYYY-MM-DD
        const [day, month, year] = birthDate.split("/");
        const isoDate = `${year}-${month}-${day}`;

        // For now, we'll create a temporary patient object
        // The actual patient ID will be generated by the server
        const patient = {
          id: "", // This will be filled by the server
          refId: refId.replace(/^0+/, ""), // Remove leading zeros
          name: name.toUpperCase(),
          birthDate: isoDate,
        };

        onSuccess(patient);
      }
    }
  };

  return (
    <div ref={formRef}>
      <PatientForm
        variant={variant}
        compact={compact}
        showDescriptions={showDescriptions}
        formId={formId}
        onSuccess={handleSuccess}
        onLoadingChange={onLoadingChange}
        redirect={false}
      />
    </div>
  );
}
